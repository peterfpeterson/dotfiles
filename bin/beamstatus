#!/usr/bin/env python3
import urllib3
import requests  # python-requests

URL = 'https://status.sns.ornl.gov/'
CLASS_ON = 'beam_status_on'
CLASS_OFF = 'beam_status_off'
ALLOWED_FACILITY = ['HFIR', 'SNS']
EXP_POWER = {'SNS': 1500, 'HFIR': 85}


def toConkyInt(facility, value):
    '''conky expects a value between 0 and 100'''
    value = float(value.split(' ')[0])
    value = 100. * value / float(EXP_POWER[facility])
    return int(value + .5)


def toValue(value):
    value, units = value.split(' ')
    if units == 'kW' and float(value) > 1000.:
        units = 'MW'
        value = float(value) / 1000.
        value = '%.1f' % value
    return str(value) + ' ' + str(units)


def getPower(facility, percentage):
    facility = facility.upper()
    if facility not in ALLOWED_FACILITY:
        raise ValueError('Facility \'%s\' is not an allowed value' % facility)

    # not verifying SSL certs normally causes a warning
    urllib3.disable_warnings()

    # get the result
    url = f'{URL}get{facility}Status.jsp'
    try:
        req = requests.get(url, verify=False, timeout=1)  # seconds
    except Exception as e:
        if percentage:
            return 0
        else:
            return "ERROR: " + str(e)

    # verify the return code
    status_code = req.status_code
    if status_code != requests.codes.OK:
        return f'ERROR for {url} status={status_code}'

    # parse the document that was returned
    for line in req.text.split('\n'):
        line = line.strip()
        if len(line) <= 0:
            continue

        if CLASS_ON in str(line):
            # magic numbers are awesome!
            start = line.find(CLASS_ON) + len(CLASS_ON) + 2
            stop = line.find('span', start) - 2
            line = line[start:stop].strip()
            if percentage:
                return toConkyInt(facility, line)
            else:
                return toValue(line)
        elif CLASS_OFF in str(line):
            if percentage:
                return 0
            else:
                return 'off'
    return 'ERROR'


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Get the beam power')

    facilities = ALLOWED_FACILITY[:]
    facilities.extend([facility.lower() for facility in ALLOWED_FACILITY])
    parser.add_argument('facility', choices=facilities)

    parser.add_argument('-p',
                        '--percentage',
                        action='store_true',
                        help='Convert value to an integer percentage (0-100)')

    parser.add_argument('-w', '--width', type=int, nargs='?', help='number of characters to output')

    options = parser.parse_args()

    result = getPower(options.facility, options.percentage)
    if options.width is not None:
        fmt = '{0: >' + str(options.width) + '}'
        result = fmt.format(result)

    print(result)
