# required for things to work - copied directly from direnv
direnv_layout_dir() {
  echo "${direnv_layout_dir:-$PWD/.direnv}"
}

########## https://github.com/direnv/direnv/pull/311

# this wins out over system version
layout_python() {
  # get supplied python version
  local python=${1:-python}
  [[ $# -gt 0 ]] && shift

  local old_env=$(direnv_layout_dir)/virtualenv
  unset PYTHONHOME
  if [[ -d $old_env && $python = python ]]; then
    export VIRTUAL_ENV=$old_env
  else
    local python_version
    python_version=$("$python" -c "import platform as p;print(p.python_version())")
    if [[ -z $python_version ]]; then
      log_error "Could not find python's version"
      return 1
    fi

    # get supplied virtualenv version
    local virtualenv=virtualenv
    if [[ $# -gt 0 ]]; then
        if [[ "${1}" == virtualenv* ]]; then
            virtualenv=${1}
            shift
        fi
    fi

    export VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
    if [[ ! -d $VIRTUAL_ENV ]]; then
      log_status "$virtualenv --python=$python $@ $VIRTUAL_ENV"
      $virtualenv "--python=$python" "$@" "$VIRTUAL_ENV"
    fi
  fi
  PATH_add "$VIRTUAL_ENV/bin"
}

# this wins out over system version
layout_python2() {
  if [[ $(command -v virtualenv-2) ]]; then
      layout_python python2 virtualenv-2 "$@"
  else
      layout_python python2 "$@"
  fi
}

# I call this with `layout python3 --system-site-packages`
# this wins out over system version
layout_python3() {
  if [[ $(command -v virtualenv-3) ]]; then
      layout_python python3 virtualenv-3 "$@"
  else
      layout_python python3 "$@"
  fi
}

########## https://github.com/direnv/direnv/pull/312

# usage: layout anaconda <enviroment_name> <conda_exe>
# where <conda_exe> is optional
layout_anaconda() {
  local env_name=$1
  local conda
  if [[ $# -gt 1 ]]; then
    conda=${2}
  else
    conda=$(command -v conda)
  fi
  PATH_add $(dirname "$conda")
  local env_loc=$("$conda" env list | grep -- "$env_name")
  if [[ ! "$env_loc" == $env_name*$env_name ]]; then
    if [[ -e environment.yml ]]; then
      log_status "creating conda enviroment"
      "$conda" env create
    else
      log_error "Could not find environment.yml"
      return 1
    fi
  fi

  source activate "$env_name"
}
